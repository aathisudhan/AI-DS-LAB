import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Sample data (X: Years of Experience, y: Salary)
X = np.array([[1], [2], [3], [4], [5], [6], [7]])  # Years of experience
y = np.array([[30000], [35000], [50000], [60000], [65000], [70000], [80000]])  # Salary

# Create a linear regression model
model = LinearRegression()

# Fit the model to the data
model.fit(X, y)

# Make predictions
y_pred = model.predict(X)

# Calculate metrics
mse = mean_squared_error(y, y_pred)
r2 = r2_score(y, y_pred)

# Print metrics
print("Mean Squared Error (MSE):", mse)
print("R-squared (RÂ²):", r2)

# Plot the data and regression line
plt.scatter(X, y, color='blue', label="Actual Data")
plt.plot(X, y_pred, color='red', label="Regression Line")
plt.xlabel("Years of Experience (X)")
plt.ylabel("Salary (y)")
plt.title("Linear Regression")
plt.legend()
plt.show()



------------------------------------------------------------------------------------------------------------


import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt

# Load dataset (Iris dataset as an example)
iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['target'] = iris.target

# For binary classification, filter classes 0 and 1
binary_df = df[df['target'] < 2]
X = binary_df[['sepal length (cm)', 'sepal width (cm)']].values
y = binary_df['target'].values

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("\nClassification Report:")
report = classification_report(y_test, y_pred, output_dict=True)
print(classification_report(y_test, y_pred))

# Generate confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

# Remove rows for 'accuracy', 'macro avg', 'weighted avg' from the classification report
filtered_report = {k: v for k, v in report.items() if k not in ['accuracy', 'macro avg', 'weighted avg']}

# Heatmap for filtered classification report
plt.figure(figsize=(8, 4))
sns.heatmap(pd.DataFrame(filtered_report).T, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Filtered Classification Report Heatmap')
plt.show()

# Heatmap for confusion matrix
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix Heatmap')
plt.show()


-----------------------------------------------------------------------------------------------------------------------------------
