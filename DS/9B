import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 3: Load the diabetes dataset as a pandas DataFrame
data = pd.DataFrame({
    "Pregnancies": [6, 1, 8, 1, 0, 5, 3, 10, 2, 8],
    "Glucose": [148, 85, 183, 89, 137, 116, 78, 115, 197, 125],
    "BloodPressure": [72, 66, 64, 66, 40, 74, 50, 0, 70, 96],
    "SkinThickness": [35, 29, 0, 23, 35, 0, 32, 0, 45, 0],
    "Insulin": [0, 0, 0, 94, 168, 0, 88, 0, 543, 0],
    "BMI": [33.6, 26.6, 23.3, 28.1, 43.1, 25.6, 31.0, 35.3, 30.5, 32.0],
    "DiabetesPedigreeFunction": [0.627, 0.351, 0.672, 0.167, 2.288, 0.201, 0.248, 0.134, 0.158, 0.232],
    "Age": [50, 31, 32, 21, 33, 30, 26, 29, 53, 54],
    "Outcome": [1, 0, 1, 0, 1, 0, 0, 0, 1, 1]
})

# Step 4: Define the feature matrix (X) by dropping the Glucose column
X = data.drop(columns=['Glucose'])

# Step 5: Define the target variable (y) as the Glucose column
y = data['Glucose']

# Step 6: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 7: Initialize the LinearRegression model
model = LinearRegression()

# Step 8: Train the model on the training dataset
model.fit(X_train, y_train)

# Step 9: Make predictions on the test dataset
y_pred = model.predict(X_test)

# Step 10: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
accuracy = r2 * 100

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (RÂ²): {r2:.2f}")
print(f"Model Accuracy: {accuracy:.2f}%")

# Step 11: Create a comparison DataFrame
comparison = pd.DataFrame({
    "Actual": y_test.values,
    "Predicted": y_pred
})

print("\nComparison of Actual vs Predicted Values:")
print(comparison)

# Step 12: Visualize the results
# Bar Chart: Actual vs Predicted Values
plt.figure(figsize=(10, 5))
plt.bar(range(len(y_test)), y_test, alpha=0.6, color='blue', label='Actual')
plt.bar(range(len(y_pred)), y_pred, alpha=0.6, color='red', label='Predicted')
plt.title('Actual vs Predicted Glucose Levels')
plt.xlabel('Sample Index')
plt.ylabel('Glucose Level')
plt.legend()
plt.grid(True)
plt.show()

# Scatter Plot: Actual vs Predicted Values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='purple', label='Predicted vs Actual')
plt.plot(y_test, y_test, 'r--', label='Perfect Prediction')
plt.title('Scatter Plot of Actual vs Predicted Glucose Levels')
plt.xlabel('Actual Glucose Levels')
plt.ylabel('Predicted Glucose Levels')
plt.legend()
plt.grid(True)
plt.show()
