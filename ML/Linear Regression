import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

# ðŸ”¹ Step 1: Define Dataset
X = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).reshape(-1, 1)  # Independent variable
Y = np.array([1.5, 3.0, 4.5, 6.1, 7.8, 9.1, 10.5, 12.2, 14.1, 15.8])  # Dependent variable

# ðŸ”¹ Step 2: Split Data into Train & Test Sets (80% train, 20% test)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# ðŸ”¹ Step 3: Train Linear Regression Model
model = LinearRegression()
model.fit(X_train, Y_train)

# ðŸ”¹ Step 4: Get Model Parameters
slope = model.coef_[0]  # Coefficient (m)
intercept = model.intercept_  # Intercept (c)

# ðŸ”¹ Step 5: Make Predictions
Y_pred = model.predict(X_test)

# ðŸ”¹ Step 6: Evaluate Model
mse = mean_squared_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred)

# ðŸ”¹ Step 7: Display Results
print(f"Model Parameters:\nâ€¢ Slope (Coefficient): {slope:.2f}\nâ€¢ Intercept: {intercept:.2f}")
print(f"\nModel Evaluation:\nâ€¢ Mean Squared Error (MSE): {mse:.2f}\nâ€¢ R-squared (RÂ²) Score: {r2:.2f}")

# ðŸ”¹ Step 8: Plot Regression Line
plt.scatter(X, Y, color='blue', label="Actual Data")
plt.plot(X, model.predict(X), color='red', linewidth=2, label="Regression Line")
plt.xlabel("X (Independent Variable)")
plt.ylabel("Y (Dependent Variable)")
plt.title("Linear Regression Model")
plt.legend()
plt.show()
